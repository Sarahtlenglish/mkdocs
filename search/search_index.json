{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vores dokumentation","text":"<p>Dette site indeholder retningslinjer, processer og ressourcer for vores team.</p>"},{"location":"#hurtigvisning","title":"Hurtigvisning","text":"<ul> <li>Git</li> <li>About Our Team</li> </ul>"},{"location":"about/","title":"Om teamet","text":"<p>Vi er en gruppe studerende fra UCL, der er dedikeret til at l\u00e6re og skabe fantastisk software.</p>"},{"location":"about/#gruppemedlemmer","title":"Gruppemedlemmer","text":"<ul> <li>Mette Lund (webudvikler)</li> <li>Sarah English (webudvikler)</li> </ul>"},{"location":"git/","title":"Vores Git Workflow","text":"BranchingCommitsWorkflows"},{"location":"git/#vores-branch-strategi","title":"Vores Branch Strategi","text":"<p>Vi bruger en \"Developer Branch Strategy\", hvor hver udvikler har deres egen personlige branch. Dette giver os en simpel og effektiv m\u00e5de at arbejde p\u00e5 i vores team.</p>"},{"location":"git/#vores-branch-struktur","title":"Vores Branch Struktur","text":"<pre><code>main\n\u251c\u2500\u2500 sarah-dev\n\u2514\u2500\u2500 mette-dev\n</code></pre> <ul> <li><code>main</code> - Her ligger vores produktionskode</li> <li><code>sarah-dev</code> - Sarahs personlige udviklingsbranch</li> <li><code>mette-dev</code> - Mettes personlige udviklingsbranch</li> </ul>"},{"location":"git/#sadan-arbejder-vi","title":"S\u00e5dan arbejder vi","text":"<ul> <li>Vi udvikler p\u00e5 vores egne branches</li> <li>Al udvikling sker p\u00e5 vores personlige branches</li> <li>Vi merger til main n\u00e5r koden er klar</li> <li>Main holdes altid opdateret med nyeste stabile version</li> <li>Efter merge til main opdaterer vi vores dev branches</li> </ul>"},{"location":"git/#eksempler-fra-vores-repository","title":"Eksempler fra vores repository","text":"<p>\u2705 God commit message: <pre><code>error handling datepicker and positioning adjustment\n</code></pre></p> <ul> <li>Den beskriver tydeligt hvad der er \u00e6ndret</li> <li>Den indeholder b\u00e5de hvad (error handling, positioning) og hvor (datepicker)</li> <li>St\u00e5r i nutid</li> </ul> <p>\u274c Mindre god commit message: <pre><code>fixed date\n</code></pre></p> <ul> <li>Den er for vag - hvilken date? hvad blev fixet?</li> <li>St\u00e5r i datid</li> </ul>"},{"location":"git/#forbedringspotentiale","title":"Forbedringspotentiale","text":"<p>I l\u00f8bet af projektet har vi l\u00e6rt at vi skulle have lavet flere commits.</p> <p>Store commits g\u00f8r det sv\u00e6rere at: - Finde hvor fejl blev introduceret - Rulle enkelte \u00e6ndringer tilbage - Forst\u00e5 udviklingen i koden</p> <p>\u274c Eksempel p\u00e5 alt for stor commit: <pre><code>added create egencontrol view, component and added vue wizard\n</code></pre></p>"},{"location":"git/#denne-commit-var-srligt-problematisk-fordi","title":"Denne commit var s\u00e6rligt problematisk fordi:","text":"<ul> <li>Den \u00e6ndrede 12 forskellige filer</li> <li>Tilf\u00f8jede +1201 linjer og fjernede -20 linjer</li> <li>Blandede feature udvikling med dependency management:<ul> <li>Tilf\u00f8jede nye npm packages (vue-step-wizard, vue3-form-wizard)</li> <li>Opdaterede package-lock.json med nye dependencies</li> <li>Tilf\u00f8jede nye Vue komponenter</li> <li>Implementerede ny funktionalitet</li> <li>Opsatte mock data</li> <li>Opdaterede router konfiguration</li> </ul> </li> </ul>"},{"location":"git/#burde-have-vret-delt-op-i-separate-commits","title":"Burde have v\u00e6ret delt op i separate commits:","text":"<p>F\u00f8rst dependencies:</p> <pre><code>\"add vue-step-wizard and vue3-form-wizard packages\"\n\"update package-lock.json\"\n</code></pre> <p>S\u00e5 komponenter og funktionalitet:</p> <pre><code>\"create base egenkontrol component\"\n\"implement vue wizard in egenkontrol\"\n\"add mock data for egenkontrol\"\n\"update router with egenkontrol routes\"\n</code></pre> <p>\u2705 Dette ville have givet os flere fordele:</p> <ul> <li>Nemmere at rulle tilbage hvis de nye packages gav problemer</li> <li>Bedre overblik over afh\u00e6ngigheder vs. faktisk kode</li> <li>Lettere at teste hver del af implementeringen</li> <li>Mere overskueligt code review process</li> <li>Klarere historik over projektets udvikling</li> </ul>"},{"location":"git/#cicd","title":"CI/CD","text":"<p>Vi bruger GitHub Actions og Firebase Hosting til vores deployment pipeline:</p>"},{"location":"git/#deploy-pa-merge-til-main","title":"Deploy p\u00e5 merge til main","text":"<pre><code>name: Deploy to Firebase Hosting on merge\non:\n  push:\n    branches:\n      - main\njobs:\n  build_and_deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - run: npm ci &amp;&amp; npm run build\n      - uses: FirebaseExtended/action-hosting-deploy@v0\n        with:\n          repoToken: ${{ secrets.GITHUB_TOKEN }}\n          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DBI_EGENKONTROL_MFD_958B1 }}\n          channelId: live\n          projectId: dbi-egenkontrol-mfd-958b1\n</code></pre>"},{"location":"git/#preview-pa-pull-requests","title":"Preview p\u00e5 Pull Requests","text":"<pre><code>name: Deploy to Firebase Hosting on PR\non: pull_request\npermissions:\n  checks: write\n  contents: read\n  pull-requests: write\njobs:\n  build_and_preview:\n    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - run: npm ci &amp;&amp; npm run build\n      - uses: FirebaseExtended/action-hosting-deploy@v0\n        with:\n          repoToken: ${{ secrets.GITHUB_TOKEN }}\n          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DBI_EGENKONTROL_MFD_958B1 }}\n          projectId: dbi-egenkontrol-mfd-958b1\n</code></pre> <p>Dette setup giver os:</p> <ul> <li>Automatisk build n\u00e5r vi merger til main</li> <li>Preview builds p\u00e5 alle pull requests</li> <li>Automatisk deployment til Firebase</li> <li>Sikker h\u00e5ndtering af credentials via GitHub Secrets</li> </ul>"},{"location":"git/#forbedringspotentiale-for-cicd","title":"Forbedringspotentiale for CI/CD","text":"<p>Vores nuv\u00e6rende setup kunne styrkes ved at tilf\u00f8je:</p> <ul> <li>Linting check (<code>npm run lint</code>)</li> <li>Automatiske tests f\u00f8r deployment (<code>npm run test</code>)</li> <li>End-to-end tests</li> </ul>"},{"location":"static-analysis/","title":"Statisk kodeanalyse","text":"<p>Her finder du information om forskellige aspekter af statisk kodeanalyse og best practices.</p> ESLintRefaktorering og PrincipperSelvdokumenterende kode"},{"location":"static-analysis/#eslint","title":"ESLint","text":"<p>ESLint er et statisk analysev\u00e6rkt\u00f8j der hj\u00e6lper med at finde problemer i JavaScript kode.</p>"},{"location":"static-analysis/#hvorfor-bruge-eslint","title":"Hvorfor bruge ESLint?","text":"<ul> <li>Finder fejl f\u00f8r koden k\u00f8rer</li> <li>Sikrer konsistent kodestil</li> <li>Forbedrer kodekvalitet</li> </ul>"},{"location":"static-analysis/#opstning","title":"Ops\u00e6tning","text":"<pre><code>rules: {\n  ...stylistic.configs.recommended.rules,\n  '@stylistic/quotes': ['error', 'single'],\n  '@stylistic/comma-dangle': ['error', 'never'],\n  '@stylistic/indent': ['error', 2],\n  '@stylistic/semi': ['error', 'never'],\n  '@stylistic/brace-style': 'error',\n  '@stylistic/space-before-blocks': 'error',\n  '@stylistic/no-tabs': ['error', { allowIndentationTabs: true }]\n}\n</code></pre>"},{"location":"static-analysis/#kodeforbedrings-principper","title":"Kodeforbedrings Principper","text":"<p>Vi har brugt forskellige principper til at forbedre vores kode gennem projektet:</p>"},{"location":"static-analysis/#single-responsibility-srp","title":"Single Responsibility (SRP)","text":"<p>Hver del af koden skal kun have \u00e9t ansvar.</p> <pre><code>// God SRP - hver funktion har \u00e9t ansvar\nfunction validateEmail(email) { ... }\nfunction saveUser(user) { ... }\n\n// D\u00e5rlig SRP - blander ansvarsomr\u00e5der\nfunction saveUserAndSendEmail(user) { ... }\n</code></pre>"},{"location":"static-analysis/#dont-repeat-yourself-dry","title":"Don't Repeat Yourself (DRY)","text":"<p>Undg\u00e5 at gentage den samme kode flere steder.</p> <pre><code>// D\u00c5RLIG PRAKSIS: Gentager samme logik flere steder\nfunction getAdminName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\nfunction getManagerName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\nfunction getUserName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\n// GOD PRAKSIS: \u00c9n funktion der g\u00f8r det samme\nfunction getFullName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n</code></pre>"},{"location":"static-analysis/#keep-it-simple-kiss","title":"Keep It Simple (KISS)","text":"<p>Hold koden s\u00e5 simpel som mulig.</p>"},{"location":"static-analysis/#eksempel-pa-refaktorering","title":"Eksempel p\u00e5 Refaktorering","text":"<p>Her er et eksempel fra vores kodebase hvor vi brugte KISS princippet til at forbedre koden:</p> <p>F\u00f8r (mere kompleks end n\u00f8dvendigt): <pre><code>// V\u00e6lg banner baseret p\u00e5 status\nif (selectedTask.value.status === 'afvigelse') {\n    return 'deviation' // R\u00f8d banner for afvigelser\n} else if (selectedTask.value.status === 'overskredet') {\n    return 'overdue' // Gult banner for overskredet deadline\n}\n</code></pre></p> <p>Efter (simpel og letl\u00e6selig): <pre><code>if (status === 'udf\u00f8rt') return 'completed'\nif (status === 'inaktiv') return 'inactive'\nif (status === 'afvigelse') return 'deviation'\nif (status === 'overskredet') return 'overdue'\n</code></pre></p>"},{"location":"static-analysis/#funktionsdokumentation","title":"Funktionsdokumentation","text":""},{"location":"static-analysis/#jsdoc-format","title":"JSDoc Format","text":"<p>Vi dokumenterer vores funktioner med JSDoc, som vist i eksemplet nedenfor med en funktion der beregner n\u00e6ste dato baseret p\u00e5 frekvens. <pre><code>/**\n* Beregn n\u00e6ste dato baseret p\u00e5 frekvens\n* @param {Date} currentDate - Den dato som funktionen skal beregne den n\u00e6ste dato fra\n* @param {string} frequency -('dagligt'|'ugentlig'|'manedlig'|'kvartal'|'\u00e5rlig')\n* @returns {Date} N\u00e6ste dato\n*/\nexport function getNextDateByFrequency(currentDate, frequency) {\nconst nextDate = new Date(currentDate)\nnextDate.setHours(0, 0, 0, 0)\n\nswitch (frequency) {\n    case 'dagligt':\n    nextDate.setDate(nextDate.getDate() + 1)\n    break\n    case 'ugentligt':\n    nextDate.setDate(nextDate.getDate() + 7)\n    break\n    case 'manedligt':\n    nextDate.setMonth(nextDate.getMonth() + 1)\n    break\n    case 'kvartal':\n    nextDate.setMonth(nextDate.getMonth() + 3)\n    break\n    case '\u00e5rligt':\n    nextDate.setFullYear(nextDate.getFullYear() + 1)\n    break\n    default:\n    nextDate.setDate(nextDate.getDate() + 1)\n}\n\nreturn nextDate\n}\n</code></pre></p>"},{"location":"static-analysis/#forklarende-kommentering","title":"Forklarende kommentering","text":"<p>Nedenst\u00e5ende er et eksempel fra vores DatepickerComponent.vue, hvor forklarende kommentering er anvendt som en guide gennem kompleks logik og for at forklare formateringsprocessen. <pre><code>const formatDate = (date) =&gt; {\n// Hvis der ikke er nogen dato, returner en tom streng\nif (!date) return ''\n// Konverter input til et Date objekt s\u00e5 vi kan bruge JavaScript's dato-metoder (2024-03-17)\nconst d = new Date(date)\n// Array med danske m\u00e5nedsnavne (index 0 = januar, 1 = februar, osv.)\nconst months = ['januar', 'februar', 'marts', 'april', 'maj', 'juni', 'juli', 'august', 'september', 'oktober', 'november', 'december']\n// Formater datoen til dansk format: \"Fra d. 17. marts 2024\"\nreturn `Fra d. ${d.getDate()}. ${months[d.getMonth()]} ${d.getFullYear()}`\n}\n</code></pre></p>"},{"location":"static-analysis/#navngivning-af-variabler","title":"Navngivning af variabler","text":"<p>Nedenst\u00e5ende er et eksempel fra vores datehelpers, som viser 2 eksempler, p\u00e5 et godt og d\u00e5rligt variabelnavn  <pre><code>//Eksempel p\u00e5 godt variabelnavn\nexport function getDaysOverdue(fromDate, toDate = new Date()) {\n  if (!fromDate) return 0\n  const from = new Date(fromDate)\n  const to = new Date(toDate)\n  // S\u00e6t begge til lokal midnat\n  from.setHours(0, 0, 0, 0)\n  to.setHours(0, 0, 0, 0)\n  const diff = Math.floor((to - from) / (1000 * 60 * 60 * 24))\n  return diff &gt; 0 ? diff : 0\n  }\n\n//Eksempel p\u00e5 d\u00e5rlig variabelnavn\nconst d = new Date(date)\n</code></pre></p>"},{"location":"static-analysis/#best-practices","title":"Best Practices","text":"<ul> <li>Brug beskrivende variabel- og funktionsnavne</li> <li>Dokument\u00e9r kun n\u00e5r koden ikke er selvforklarende</li> <li>Hold kommentarer opdaterede</li> <li>Undg\u00e5 obvious kommentarer</li> </ul>"},{"location":"testing/","title":"Test","text":"<p>Her finder du information om forskellige typer af tests og hvordan de bruges i udviklingen.</p> Unit TestEnd-to-end Test"},{"location":"testing/#unit-testing","title":"Unit Testing","text":"<p>Unit tests er sm\u00e5, isolerede tests der tester enkelte komponenter eller funktioner.</p>"},{"location":"testing/#hvorfor-unit-testing","title":"Hvorfor Unit Testing?","text":"<ul> <li>Finder fejl tidligt i udviklingen</li> <li>Dokumenterer kodens forventet opf\u00f8rsel</li> <li>G\u00f8r refaktorering mere sikker</li> </ul>"},{"location":"testing/#best-practices","title":"Best Practices","text":"<ul> <li>Test \u00e9n ting ad gangen</li> <li>Hold tests simple og l\u00e6sbare</li> </ul>"},{"location":"testing/#getstatuslabel","title":"getStatusLabel","text":"<p>Denne funktion konverterer status-v\u00e6rdier til l\u00e6sbare labels i brugergr\u00e6nsefladen. For eksempel konverterer den 'afvigelse' til 'Afvigelse'. Den bruges prim\u00e6rt i status-visninger og badges gennem hele applikationen, hvor der skal vises en brugervenlig version af en status.</p> FunktionTestTerminal OutputAnvendelse <pre><code>export function getStatusLabel(status) {\n  const labels = {\n    'afvigelse': 'Afvigelse',\n    'overskredet': 'Overskredet'\n  }\n  return labels[status] || status\n}\n</code></pre> <pre><code>describe('getStatusLabel', () =&gt; {\n  test('should return correct label for afvigelse', () =&gt; {\n    expect(getStatusLabel('afvigelse')).toBe('Afvigelse')\n  })\n  test('should return correct label for overskredet', () =&gt; {\n    expect(getStatusLabel('overskredet')).toBe('Overskredet')\n  })\n})\n</code></pre> <pre><code>\u2713 getStatusLabel &gt; should return correct label for afvigelse\n\u2713 getStatusLabel &gt; should return correct label for overskredet\nTest Files  1 passed (1)\nTests       2 passed (2)\n</code></pre> <pre><code>// I labelHelpers.js\nexport const processCalendarTasks = (tasks) =&gt; {\n  if (!tasks) return []\n  return tasks.map((task) =&gt; {\n    const historyEntry = task.historik?.find(entry =&gt; entry.dato === task.dato)\n    const status = historyEntry?.status || 'inaktiv'\n    return {\n      ...task,\n      location: getLocationLabel(task.location),\n      type: getTypeLabel(task.type),\n      status: status,\n      statusLabel: getStatusLabel(status),\n      enhedId: task.enhedId || task.details,\n      ansvarligeBrugere: task.ansvarligeBrugere\n    }\n  })\n}\n</code></pre>"},{"location":"testing/#getbannertype","title":"getBannerType","text":"<p>Denne funktion bestemmer hvilken type banner eller indikator der skal vises baseret p\u00e5 en status. For eksempel konverterer den 'udf\u00f8rt' til 'completed', hvilket typisk vil vise en gr\u00f8n banner. Den bruges til at style status-indikatorer i brugergr\u00e6nsefladen med forskellige farver og typer, s\u00e5 brugeren nemt kan se status p\u00e5 et \u00f8jekast.</p> FunktionTestTerminal OutputAnvendelse <pre><code>export function getBannerType(status) {\n  if (status === 'udf\u00f8rt') return 'completed'\n  if (status === 'inaktiv') return 'inactive'\n  if (status === 'afvigelse') return 'deviation'\n  if (status === 'overskredet') return 'overdue'\n}\n</code></pre> <pre><code>describe('getBannerType', () =&gt; {\n  test('should return completed for udf\u00f8rt', () =&gt; {\n    expect(getBannerType('udf\u00f8rt')).toBe('completed')\n  })\n  test('should return inactive for afvigelse', () =&gt; {\n    expect(getBannerType('afvigelse')).toBe('deviation')\n  })\n})\n</code></pre> <pre><code>\u2713 getBannerType &gt; should return completed for udf\u00f8rt\n\u2713 getBannerType &gt; should return inactive for afvigelse\nTest Files  1 passed (1)\nTests       2 passed (2)\n</code></pre> <pre><code>// I CalendarDetailContent.vue\nconst bannerType = computed(() =&gt; {\n  if (!selectedTask.value) return null\n  return getBannerType(selectedTask.value.status)\n})\n</code></pre>"},{"location":"testing/#getrolelabel","title":"getRoleLabel","text":"<p>Denne funktion konverterer roller fra databasen til l\u00e6sbare labels i brugergr\u00e6nsefladen. For eksempel konverterer den 'service_bruger' til 'Service Bruger'. Den bruges i bruger-tabeller og bruger-detaljer for at vise roller i et l\u00e6sbart format, s\u00e5 brugerne nemt kan forst\u00e5 hvilken rolle en person har i systemet.</p> FunktionTestTerminal OutputAnvendelse <pre><code>export function getRoleLabel(role) {\n  const labels = {\n    'service_bruger': 'Service Bruger',\n    'facility_manager': 'Facility Manager',\n    'administrator': 'Administrator',\n    'visnings_bruger': 'Visnings Bruger'\n  }\n  return labels[role] || role\n}\n</code></pre> <pre><code>describe('getRoleLabel', () =&gt; {\n  test('should return correct label for service_bruger', () =&gt; {\n    expect(getRoleLabel('service_bruger')).toBe('Service Bruger')\n  })\n  test('should return correct label for facility_manager', () =&gt; {\n    expect(getRoleLabel('facility_manager')).toBe('Facility Manager')\n  })\n  test('should return correct label for administrator', () =&gt; {\n    expect(getRoleLabel('administrator')).toBe('Administrator')\n  })\n  test('should return correct label for visnings_bruger', () =&gt; {\n    expect(getRoleLabel('visnings_bruger')).toBe('Visnings Bruger')\n  })\n  test('should return input value for unknown role', () =&gt; {\n    expect(getRoleLabel('unknown')).toBe('unknown')\n  })\n})\n</code></pre> <pre><code>\u2713 getRoleLabel &gt; should return correct label for service_bruger\n\u2713 getRoleLabel &gt; should return correct label for facility_manager\n\u2713 getRoleLabel &gt; should return correct label for administrator\n\u2713 getRoleLabel &gt; should return correct label for visnings_bruger\n\u2713 getRoleLabel &gt; should return input value for unknown role\nTest Files  1 passed (1)\nTests       5 passed (5)\n</code></pre> <pre><code>// I OpretBrugerView.vue - Bruges direkte i computed property til at vise rolle i preview\nconst detailItem = computed(() =&gt; {\n  const selectedLeader = formData.brugereRef &amp;&amp; formData.brugereRef !== 'bruger_er_chef'\n    ? leaderOptions.value.find(opt =&gt; opt.value === formData.brugereRef)\n    : null\n\n  return {\n    id: 'preview',\n    fuldeNavn: formData.fuldeNavn || 'Ny Bruger',\n    rolle: getRoleLabel(formData.rolle) || 'Rolle ikke angivet',\n    brugereRef: formData.brugereRef || '',\n    lederNavn: selectedLeader ? selectedLeader.label : '',\n    adresse: formData.adresse || 'Adresse ikke angivet',\n    postnummer: formData.postnummer || 'By ikke angivet',\n    by: formData.by || '',\n    email: formData.email || 'Email ikke angivet',\n    telefon: formData.telefon || 'Telefonnummer ikke angivet'\n  }\n})\n</code></pre>"},{"location":"testing/#formatdatetoiso","title":"formatDateToISO","text":"<p>Denne funktion formaterer en dato til en ISO string (YYYY-MM-DD). Den bruges til at sikre ensartet datoformat i hele applikationen, is\u00e6r n\u00e5r data sendes til eller modtages fra backend eller formularer.</p> FunktionTestTerminal OutputAnvendelse <pre><code>export function formatDateToISO(date) {\n  if (!date) return null\n  return date.toISOString().split('T')[0]\n}\n</code></pre> <pre><code>describe('formatDateToISO', () =&gt; {\n  test('should format current date to ISO string', () =&gt; {\n    const today = new Date()\n    const result = formatDateToISO(today)\n    expect(result).toMatch(/^\\d{4}-\\d{2}-\\d{2}$/) // Tjekker format YYYY-MM-DD\n  })\n  test('should format date from form input', () =&gt; {\n    const formDate = new Date('2024-03-20T00:00:00')\n    expect(formatDateToISO(formDate)).toBe('2024-03-20')\n  })\n  test('should return null for empty form input', () =&gt; {\n    expect(formatDateToISO('')).toBeNull()\n  })\n})\n</code></pre> <pre><code>\u2713 formatDateToISO &gt; should format current date to ISO string\n\u2713 formatDateToISO &gt; should format date from form input\n\u2713 formatDateToISO &gt; should return null for empty form input\nTest Files  1 passed (1)\nTests       3 passed (3)\n</code></pre> <pre><code>// I OpretEgenkontrolView.vue\nconst detailItem = computed(() =&gt; ({\n  navn: formData.navn || 'Ny egenkontrol',\n  beskrivelse: formData.beskrivelse || 'Ingen beskrivelse angivet',\n  type: 'Egenkontrol',\n  status: 'normal',\n  lokation: formData.selectedEnheder || formData.enhed || 'Enhed ikke angivet',\n  checkliste: formData.selectedCheckliste || formData.tjekliste || 'Tjekliste ikke angivet',\n  ansvarligeBrugere: [\n    formData.selectedAnsvarlige\n    || formData.ansvarligeBrugere\n    || formData.ansvarlige\n    || 'Bruger ikke angivet'\n  ],\n  p\u00e5mindelser: [\n    { frekvens: formData.p\u00e5mindelseF\u00f8rFrekvens || formData.reminderFrekvens, tidspunkt: formData.p\u00e5mindelseF\u00f8rTidspunkt || formData.reminderTidspunkt },\n    { frekvens: formData.p\u00e5mindelseEfterFrekvens || formData.deadlineFrekvens, tidspunkt: formData.p\u00e5mindelseEfterTidspunkt || formData.deadlineTidspunkt }\n  ],\n  modtagere: [\n    formData.kvitteringModtager || '',\n    formData.afvigelseModtager || ''\n  ],\n  startDato: formatDateToISO(formData.startDato) || formatDateToISO(new Date())\n}))\n</code></pre>"},{"location":"testing/#getdaysoverdue","title":"getDaysOverdue","text":"<p>Denne funktion beregner hvor mange dage en given dato er overskredet i forhold til i dag. Den bruges til at vise hvor mange dage en opgave eller frist er overskredet i brugergr\u00e6nsefladen.</p> FunktionTestTerminal OutputAnvendelse <pre><code>export function getDaysOverdue(date) {\n  if (!date) return 0\n  const today = new Date()\n  const diffTime = today - new Date(date)\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))\n  return diffDays &gt; 0 ? diffDays : 0\n}\n</code></pre> <pre><code>describe('getDaysOverdue', () =&gt; {\n  test('should return 0 for today', () =&gt; {\n    const today = new Date()\n    expect(getDaysOverdue(today)).toBe(0)\n  })\n  test('should return 1 for yesterday', () =&gt; {\n    const yesterday = new Date()\n    yesterday.setDate(yesterday.getDate() - 1)\n    expect(getDaysOverdue(yesterday)).toBe(1)\n  })\n  test('should return 7 for last week', () =&gt; {\n    const lastWeek = new Date()\n    lastWeek.setDate(lastWeek.getDate() - 7)\n    expect(getDaysOverdue(lastWeek)).toBe(7)\n  })\n  test('should return 0 for future date', () =&gt; {\n    const tomorrow = new Date()\n    tomorrow.setDate(tomorrow.getDate() + 1)\n    expect(getDaysOverdue(tomorrow)).toBe(0)\n  })\n})\n</code></pre> <pre><code>\u2713 getDaysOverdue &gt; should return 0 for today\n\u2713 getDaysOverdue &gt; should return 1 for yesterday\n\u2713 getDaysOverdue &gt; should return 7 for last week\n\u2713 getDaysOverdue &gt; should return 0 for future date\nTest Files  1 passed (1)\nTests       4 passed (4)\n</code></pre> <pre><code>// I egenkontrolStore.js\nconst overdueDays = computed(() =&gt; {\n  if (!selectedTask.value || selectedTask.value.status !== 'overskredet') return 0\n  return getDaysOverdue(selectedTask.value.dato)\n})\n\n&lt;span class=\"detail-label\"&gt;\n  Deadline - overskredet {{ overdueDays }} dag{{ overdueDays === 1 ? '' : 'e' }}\n&lt;/span&gt;\n</code></pre>"},{"location":"testing/#end-to-end-testing","title":"End-to-end Testing","text":"<p>E2E tests tester flows i systemet, som en bruger rigtig ville bruge det.</p> <p>Vi har valgt at bruge Cypress som vores E2E testv\u00e6rkt\u00f8j fordi det giver os mulighed for at teste vores Vue.js applikation direkte i browseren, med en intuitiv API og god debugging support. Det er s\u00e6rligt nyttigt for vores team da det giver os mulighed for at se testen k\u00f8re i realtid og nemt kan identificere hvor fejl opst\u00e5r.</p>"},{"location":"testing/#hvorfor-e2e-testing","title":"Hvorfor E2E Testing?","text":"<ul> <li>Validerer systemets flows</li> <li>Finder integrationsproblemer</li> <li>Tester brugeroplevelsen</li> </ul>"},{"location":"testing/#eksempel-cypress","title":"Eksempel (Cypress)","text":""},{"location":"testing/#opret-egenkontrol","title":"Opret Egenkontrol","text":"<p>Dette eksempel viser hvordan vi tester oprettelsen af en ny egenkontrol. Testen gennemg\u00e5r hele processen fra start til slut, inklusiv udfyldelse af alle felter og validering af at egenkontrollen bliver oprettet korrekt. Vi har ogs\u00e5 inkluderet debugging tests.</p> TestDebugResultat <pre><code>describe('Opret Egenkontrol', () =&gt; {\n  beforeEach(() =&gt; {\n    cy.visit('/egenkontrol/opret')\n  })\n\n  it('skal kunne oprette en ny egenkontrol', () =&gt; {\n    cy.get('[data-test=\"selectedCheckliste\"]').click()\n    cy.get('.dropdown-menu button').first().click()\n    cy.get('[data-test=\"navn\"]').type('Test Egenkontrol')\n    cy.get('[data-test=\"beskrivelse\"]').type('Test beskrivelse')\n    cy.get('[data-test=\"startDato\"]').click()\n    cy.get('.dp__menu').should('be.visible')\n    cy.get('.dp__today').click()\n    cy.get('[data-test=\"next-step\"]').click()\n\n    cy.get('#Enheder\\\\&amp;Ansvarlige1').should('be.visible')\n    cy.get('[data-test=\"selectedEnheder\"]').should('be.visible')\n    cy.get('[data-test=\"selectedEnheder\"]').click()\n    cy.get('.dropdown-menu button').first().click()\n    cy.get('[data-test=\"selectedAnsvarlige\"]').click()\n    cy.get('.dropdown-menu button').first().click()\n    cy.get('[data-test=\"next-step\"]').click()\n\n    cy.get('.step-heading').contains('Notifikations indstillinger for egenkontrollen').should('be.visible')\n    cy.get('[data-test=\"reminderFrekvens\"]').should('be.visible')\n    cy.get('[data-test=\"reminderFrekvens\"]').click()\n    cy.get('.dropdown-menu button').first().click()\n    cy.get('[data-test=\"reminderTidspunkt\"]').click()\n    cy.get('.dropdown-menu button').first().click()\n    cy.get('[data-test=\"deadlineFrekvens\"]').click()\n    cy.get('.dropdown-menu button').first().click()\n    cy.get('[data-test=\"deadlineTidspunkt\"]').click()\n    cy.get('.dropdown-menu button').first().click()\n    cy.get('[data-test=\"kvitteringModtager\"]').click()\n    cy.get('.dropdown-menu button').first().click()\n    cy.get('[data-test=\"afvigelseModtager\"]').click()\n    cy.get('.dropdown-menu button').first().click()\n\n    cy.get('[data-test=\"gem-egenkontrol\"]').click()\n    cy.url().should('include', '/egenkontrol')\n  })\n})\n</code></pre> <pre><code>describe('Opret Egenkontrol debug', () =&gt; {\n  beforeEach(() =&gt; {\n    cy.visit('/egenkontrol/opret')\n  })\n\n  it('skal kunne se f\u00f8rste input felt', () =&gt; {\n    cy.get('h1').should('contain', 'Opret Egenkontrol')\n    cy.get('[data-test=\"selectedCheckliste\"]').should('be.visible')\n  })\n\n  it('skal kunne interagere med f\u00f8rste input felt', () =&gt; {\n    cy.get('[data-test=\"selectedCheckliste\"]').click()\n    cy.get('.dropdown-menu').should('be.visible')\n    cy.get('.dropdown-menu button').should('have.length.greaterThan', 0)\n    cy.get('.dropdown-menu button').first().click()\n    cy.get('.dropdown-menu').should('not.exist')\n  })\n\n  it('skal kunne bruge datepickeren', () =&gt; {\n    cy.get('[data-test=\"startDato\"]').click()\n    cy.get('.dp__menu').should('be.visible')\n    cy.get('.dp__today').click()\n    cy.get('[data-test=\"startDato\"]').should('not.be.empty')\n  })\n\n  it('skal kunne udfylde f\u00f8rste step og g\u00e5 videre', () =&gt; {\n    cy.get('[data-test=\"selectedCheckliste\"]').click()\n    cy.get('.dropdown-menu button').first().click()\n    cy.get('[data-test=\"navn\"]').type('Test Egenkontrol')\n    cy.get('[data-test=\"beskrivelse\"]').type('Test beskrivelse')\n    cy.get('[data-test=\"startDato\"]').click()\n    cy.get('.dp__menu').should('be.visible')\n    cy.get('.dp__today').click()\n    cy.get('[data-test=\"next-step\"]').click()\n    cy.get('#Enheder\\\\&amp;Ansvarlige1').should('be.visible')\n    cy.get('[data-test=\"selectedEnheder\"]').should('be.visible')\n  })\n})\n</code></pre> <pre><code>Running:  opret-egenkontrol.cy.js                                                         (1 of 1)\n\nOpret Egenkontrol\n  \u2713 skal kunne se f\u00f8rste input felt (1093ms)\n  \u2713 skal kunne interagere med f\u00f8rste input felt (545ms)\n  \u2713 skal kunne bruge datepickeren (504ms)\n  \u2713 skal kunne udfylde f\u00f8rste step og g\u00e5 videre (1396ms)\n  \u2713 skal kunne oprette en ny egenkontrol (2705ms)\n\n  5 passing (6s)\n\n(Results)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Tests:        5                                                                                \u2502\n\u2502 Passing:      5                                                                                \u2502\n\u2502 Failing:      0                                                                                \u2502\n\u2502 Pending:      0                                                                                \u2502\n\u2502 Skipped:      0                                                                                \u2502\n\u2502 Screenshots:  0                                                                                \u2502\n\u2502 Video:        false                                                                            \u2502\n\u2502 Duration:     6 seconds                                                                        \u2502\n\u2502 Spec Ran:     opret-egenkontrol.cy.js                                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n========================================================================================\n\n(Run Finished)\n\n     Spec                                              Tests  Passing  Failing  Pending  Skipped  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u2714  opret-egenkontrol.cy.js                  00:06        5        5        -        -        - \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2714  All specs passed!                        00:06        5        5        -        -        -  \n</code></pre>"},{"location":"testing/#opret-enhed-gruppe","title":"Opret Enhed (Gruppe)","text":"<p>Her tester vi oprettelsen af en ny enhed med underenheder. Testen sikrer at alle trin i processen fungerer, fra valg af enhedstype til oprettelse af underenheder og finalisering.</p> TestResultat <pre><code>describe('Opret Enhed (Gruppe)', () =&gt; {\n  it('skal kunne oprette en gruppe med underenheder', () =&gt; {\n    cy.visit('/enheder/opret');\n\n    // Step 1: Gruppe Information\n    cy.get('.dropdown').first().click();\n    cy.get('.dropdown-menu button').contains('Gruppe').click();\n\n    cy.get('input[placeholder=\"Angiv gruppens titel\"]').type('TestGruppe');\n    cy.get('input[placeholder=\"Angiv beskrivelse af gruppen\"]').type('Test beskrivelse');\n    cy.get('.dropdown').eq(1).click();\n    cy.get('.dropdown-menu button').first().click();\n\n    cy.contains('button', 'N\u00e6ste').click();\n\n    // Step 2: Underenheder\n    cy.get('input[type=\"number\"]').clear().type('5');\n    cy.get('.opret-button').click();\n\n    // Tjek at der nu er 5 r\u00e6kker i underenheder-tabellen (kun i formularen)\n    cy.get('.form-container .underenheder-table .table-row').should('have.length', 5);\n\n    // Submit form\n    cy.get('[data-test=\"gem-enhed\"]').click()\n\n    // Verificer redirect\n    cy.url().should('include', '/enheder');\n\n    // Verificer at enheden er oprettet og vises i tabellen\n    cy.contains('.data-table tr', 'TestGruppe').should('exist');\n  });\n});\n</code></pre> <pre><code>Running:  opret-enhed.cy.js                                                         (1 of 1)\n\nOpret Enhed (Gruppe)\n  \u2713 skal kunne oprette en gruppe med underenheder (2705ms)\n\n  1 passing (3s)\n\n(Results)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Tests:        1                                                                                \u2502\n\u2502 Passing:      1                                                                                \u2502\n\u2502 Failing:      0                                                                                \u2502\n\u2502 Pending:      0                                                                                \u2502\n\u2502 Skipped:      0                                                                                \u2502\n\u2502 Screenshots:  0                                                                                \u2502\n\u2502 Video:        false                                                                            \u2502\n\u2502 Duration:     3 seconds                                                                        \u2502\n\u2502 Spec Ran:     opret-enhed.cy.js                                                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n========================================================================================\n\n(Run Finished)\n\n     Spec                                              Tests  Passing  Failing  Pending  Skipped  \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \u2714  opret-enhed.cy.js                          00:03        1        1        -        -        - \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n  \u2714  All specs passed!                        00:03        1        1        -        -        -  \n</code></pre>"},{"location":"testing/#best-practices_1","title":"Best Practices","text":"<ul> <li>Test kritiske brugerflows</li> <li>Brug stabile selectors</li> </ul>"}]}