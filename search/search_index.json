{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Documentation","text":"<p>This site contains guidelines, processes, and resources for our team.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Git</li> <li>About Our Team</li> </ul>"},{"location":"about/","title":"About Our Team","text":"<p>Vi er en gruppe studerende fra UCL, der er dedikeret til at l\u00e6re og skabe fantastisk software.</p>"},{"location":"about/#team-members","title":"Team Members","text":"<ul> <li>Mette Lund (webudvikler)</li> <li>Sarah English (webudvikler)</li> </ul>"},{"location":"git/","title":"Vores Git Workflow","text":"BranchingCommitsWorkflows"},{"location":"git/#vores-branch-strategi","title":"Vores Branch Strategi","text":"<p>Vi bruger en \"Developer Branch Strategy\", hvor hver udvikler har deres egen personlige branch. Dette giver os en simpel og effektiv m\u00e5de at arbejde p\u00e5 i vores team.</p>"},{"location":"git/#vores-branch-struktur","title":"Vores Branch Struktur","text":"<pre><code>main\n\u251c\u2500\u2500 sarah-dev\n\u2514\u2500\u2500 mette-dev\n</code></pre> <ul> <li><code>main</code> - Her ligger vores produktionskode</li> <li><code>sarah-dev</code> - Sarahs personlige udviklingsbranch</li> <li><code>mette-dev</code> - Mettes personlige udviklingsbranch</li> </ul>"},{"location":"git/#sadan-arbejder-vi","title":"S\u00e5dan arbejder vi","text":"<ul> <li>Vi udvikler p\u00e5 vores egne branches</li> <li>Al udvikling sker p\u00e5 vores personlige branches</li> <li>Vi merger til main n\u00e5r koden er klar</li> <li>Main holdes altid opdateret med nyeste stabile version</li> <li>Efter merge til main opdaterer vi vores dev branches</li> </ul>"},{"location":"git/#eksempler-fra-vores-repository","title":"Eksempler fra vores repository","text":"<p>\u2705 God commit message: <pre><code>error handling datepicker and positioning adjustment\n</code></pre></p> <ul> <li>Den beskriver tydeligt hvad der er \u00e6ndret</li> <li>Den indeholder b\u00e5de hvad (error handling, positioning) og hvor (datepicker)</li> <li>St\u00e5r i nutid</li> </ul> <p>\u274c Mindre god commit message: <pre><code>fixed date\n</code></pre></p> <ul> <li>Den er for vag - hvilken date? hvad blev fixet?</li> <li>St\u00e5r i datid</li> </ul>"},{"location":"git/#forbedringspotentiale","title":"Forbedringspotentiale","text":"<p>I l\u00f8bet af projektet har vi l\u00e6rt at vi skulle have lavet flere commits.</p> <p>Store commits g\u00f8r det sv\u00e6rere at: - Finde hvor fejl blev introduceret - Rulle enkelte \u00e6ndringer tilbage - Forst\u00e5 udviklingen i koden</p> <p>\u274c Eksempel p\u00e5 alt for stor commit: <pre><code>added create egencontrol view, component and added vue wizard\n</code></pre></p>"},{"location":"git/#denne-commit-var-srligt-problematisk-fordi","title":"Denne commit var s\u00e6rligt problematisk fordi:","text":"<ul> <li>Den \u00e6ndrede 12 forskellige filer</li> <li>Tilf\u00f8jede +1201 linjer og fjernede -20 linjer</li> <li>Blandede feature udvikling med dependency management:<ul> <li>Tilf\u00f8jede nye npm packages (vue-step-wizard, vue3-form-wizard)</li> <li>Opdaterede package-lock.json med nye dependencies</li> <li>Tilf\u00f8jede nye Vue komponenter</li> <li>Implementerede ny funktionalitet</li> <li>Opsatte mock data</li> <li>Opdaterede router konfiguration</li> </ul> </li> </ul>"},{"location":"git/#burde-have-vret-delt-op-i-separate-commits","title":"Burde have v\u00e6ret delt op i separate commits:","text":"<p>F\u00f8rst dependencies:</p> <pre><code>\"add vue-step-wizard and vue3-form-wizard packages\"\n\"update package-lock.json\"\n</code></pre> <p>S\u00e5 komponenter og funktionalitet:</p> <pre><code>\"create base egenkontrol component\"\n\"implement vue wizard in egenkontrol\"\n\"add mock data for egenkontrol\"\n\"update router with egenkontrol routes\"\n</code></pre> <p>\u2705 Dette ville have givet os flere fordele:</p> <ul> <li>Nemmere at rulle tilbage hvis de nye packages gav problemer</li> <li>Bedre overblik over afh\u00e6ngigheder vs. faktisk kode</li> <li>Lettere at teste hver del af implementeringen</li> <li>Mere overskueligt code review process</li> <li>Klarere historik over projektets udvikling</li> </ul>"},{"location":"git/#cicd","title":"CI/CD","text":"<p>Vi bruger GitHub Actions og Firebase Hosting til vores deployment pipeline:</p>"},{"location":"git/#deploy-pa-merge-til-main","title":"Deploy p\u00e5 merge til main","text":"<pre><code>name: Deploy to Firebase Hosting on merge\non:\n  push:\n    branches:\n      - main\njobs:\n  build_and_deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - run: npm ci &amp;&amp; npm run build\n      - uses: FirebaseExtended/action-hosting-deploy@v0\n        with:\n          repoToken: ${{ secrets.GITHUB_TOKEN }}\n          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DBI_EGENKONTROL_MFD_958B1 }}\n          channelId: live\n          projectId: dbi-egenkontrol-mfd-958b1\n</code></pre>"},{"location":"git/#preview-pa-pull-requests","title":"Preview p\u00e5 Pull Requests","text":"<pre><code>name: Deploy to Firebase Hosting on PR\non: pull_request\npermissions:\n  checks: write\n  contents: read\n  pull-requests: write\njobs:\n  build_and_preview:\n    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - run: npm ci &amp;&amp; npm run build\n      - uses: FirebaseExtended/action-hosting-deploy@v0\n        with:\n          repoToken: ${{ secrets.GITHUB_TOKEN }}\n          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_DBI_EGENKONTROL_MFD_958B1 }}\n          projectId: dbi-egenkontrol-mfd-958b1\n</code></pre> <p>Dette setup giver os:</p> <ul> <li>Automatisk build n\u00e5r vi merger til main</li> <li>Preview builds p\u00e5 alle pull requests</li> <li>Automatisk deployment til Firebase</li> <li>Sikker h\u00e5ndtering af credentials via GitHub Secrets</li> </ul>"},{"location":"git/#forbedringspotentiale-for-cicd","title":"Forbedringspotentiale for CI/CD","text":"<p>Vores nuv\u00e6rende setup kunne styrkes ved at tilf\u00f8je:</p> <ul> <li>Linting check (<code>npm run lint</code>)</li> <li>Automatiske tests f\u00f8r deployment (<code>npm run test</code>)</li> <li>End-to-end tests</li> </ul>"},{"location":"static-analysis/","title":"Statisk kodeanalyse","text":"<p>Her finder du information om forskellige aspekter af statisk kodeanalyse og best practices.</p> ESLintRefaktorering og PrincipperKommentar"},{"location":"static-analysis/#eslint","title":"ESLint","text":"<p>ESLint er et statisk analysev\u00e6rkt\u00f8j der hj\u00e6lper med at finde problemer i JavaScript kode.</p>"},{"location":"static-analysis/#hvorfor-bruge-eslint","title":"Hvorfor bruge ESLint?","text":"<ul> <li>Finder fejl f\u00f8r koden k\u00f8rer</li> <li>Sikrer konsistent kodestil</li> <li>Forbedrer kodekvalitet</li> </ul>"},{"location":"static-analysis/#opstning","title":"Ops\u00e6tning","text":"<pre><code>rules: {\n  ...stylistic.configs.recommended.rules,\n  '@stylistic/quotes': ['error', 'single'],\n  '@stylistic/comma-dangle': ['error', 'never'],\n  '@stylistic/indent': ['error', 2],\n  '@stylistic/semi': ['error', 'never'],\n  '@stylistic/brace-style': 'error',\n  '@stylistic/space-before-blocks': 'error',\n  '@stylistic/no-tabs': ['error', { allowIndentationTabs: true }]\n}\n</code></pre>"},{"location":"static-analysis/#kodeforbedrings-principper","title":"Kodeforbedrings Principper","text":"<p>Vi har brugt forskellige principper til at forbedre vores kode gennem projektet:</p>"},{"location":"static-analysis/#single-responsibility-srp","title":"Single Responsibility (SRP)","text":"<p>Hver del af koden skal kun have \u00e9t ansvar.</p> <pre><code>// God SRP - hver funktion har \u00e9t ansvar\nfunction validateEmail(email) { ... }\nfunction saveUser(user) { ... }\n\n// D\u00e5rlig SRP - blander ansvarsomr\u00e5der\nfunction saveUserAndSendEmail(user) { ... }\n</code></pre>"},{"location":"static-analysis/#dont-repeat-yourself-dry","title":"Don't Repeat Yourself (DRY)","text":"<p>Undg\u00e5 at gentage den samme kode flere steder.</p>"},{"location":"static-analysis/#keep-it-simple-kiss","title":"Keep It Simple (KISS)","text":"<p>Hold koden s\u00e5 simpel som mulig.</p>"},{"location":"static-analysis/#eksempel-pa-refaktorering","title":"Eksempel p\u00e5 Refaktorering","text":"<p>Her er et eksempel fra vores kodebase hvor vi brugte KISS princippet til at forbedre koden:</p> <p>F\u00f8r (mere kompleks end n\u00f8dvendigt): <pre><code>// V\u00e6lg banner baseret p\u00e5 status\nif (selectedTask.value.status === 'afvigelse') {\n    return 'deviation' // R\u00f8d banner for afvigelser\n} else if (selectedTask.value.status === 'overskredet') {\n    return 'overdue' // Gult banner for overskredet deadline\n}\n</code></pre></p> <p>Efter (simpel og letl\u00e6selig): <pre><code>if (status === 'udf\u00f8rt') return 'completed'\nif (status === 'inaktiv') return 'inactive'\nif (status === 'afvigelse') return 'deviation'\nif (status === 'overskredet') return 'overdue'\n</code></pre></p> <p>Forbedringer:</p> <ul> <li>Fjernet un\u00f8dvendige kommentarer</li> <li>Gjort koden selvforklarende</li> <li>Brugt en enklere if-struktur</li> <li>Konsistent formatering</li> </ul>"},{"location":"static-analysis/#funktionsdokumentation","title":"Funktionsdokumentation","text":""},{"location":"static-analysis/#jsdoc-format","title":"JSDoc Format","text":"<pre><code>/**\n * Beregner summen af to tal\n * @param {number} a - Det f\u00f8rste tal\n * @param {number} b - Det andet tal\n * @returns {number} Summen af a og b\n */\nfunction add(a, b) {\n  return a + b;\n}\n</code></pre>"},{"location":"static-analysis/#best-practices","title":"Best Practices","text":"<ul> <li>Dokument\u00e9r public API'er</li> <li>Beskriv parametre og returv\u00e6rdier</li> <li>Hold kommentarer opdaterede</li> <li>Undg\u00e5 obvious kommentarer </li> </ul>"},{"location":"testing/","title":"Test","text":"<p>Her finder du information om forskellige typer af tests og hvordan de bruges i udviklingen.</p> Unit TestEnd-2-end Test"},{"location":"testing/#unit-testing","title":"Unit Testing","text":"<p>Unit tests er sm\u00e5, isolerede tests der tester enkelte komponenter eller funktioner.</p>"},{"location":"testing/#hvorfor-unit-testing","title":"Hvorfor Unit Testing?","text":"<ul> <li>Finder fejl tidligt i udviklingen</li> <li>Dokumenterer kodens forventet opf\u00f8rsel</li> <li>G\u00f8r refaktorering sikrere</li> </ul>"},{"location":"testing/#best-practices","title":"Best Practices","text":"<ul> <li>Test \u00e9n ting ad gangen</li> <li>F\u00f8lg AAA-m\u00f8nsteret (Arrange, Act, Assert)</li> <li>Hold tests simple og l\u00e6sbare</li> </ul>"},{"location":"testing/#eksempel-jest","title":"Eksempel (Jest)","text":"<pre><code>describe('Calculator', () =&gt; {\n  test('should add two numbers correctly', () =&gt; {\n    // Arrange\n    const a = 2;\n    const b = 3;\n\n    // Act\n    const result = add(a, b);\n\n    // Assert\n    expect(result).toBe(5);\n  });\n});\n</code></pre>"},{"location":"testing/#end-to-end-testing","title":"End-to-end Testing","text":"<p>E2E tests tester hele systemet fra start til slut, som en rigtig bruger ville bruge det.</p>"},{"location":"testing/#hvorfor-e2e-testing","title":"Hvorfor E2E Testing?","text":"<ul> <li>Validerer hele systemets flow</li> <li>Finder integrationsproblemer</li> <li>Tester brugeroplevelsen</li> </ul>"},{"location":"testing/#populre-e2e-vrktjer","title":"Popul\u00e6re E2E V\u00e6rkt\u00f8jer","text":"<ul> <li>Cypress</li> <li>Playwright</li> <li>Selenium</li> </ul>"},{"location":"testing/#eksempel-cypress","title":"Eksempel (Cypress)","text":"<pre><code>describe('Login Flow', () =&gt; {\n  it('should login successfully', () =&gt; {\n    // Bes\u00f8g login siden\n    cy.visit('/login');\n\n    // Udfyld login form\n    cy.get('#email').type('user@example.com');\n    cy.get('#password').type('password123');\n\n    // Klik p\u00e5 login knap\n    cy.get('#login-button').click();\n\n    // Verificer at vi er logget ind\n    cy.url().should('include', '/dashboard');\n    cy.get('.welcome-message')\n      .should('contain', 'Welcome back');\n  });\n});\n</code></pre>"},{"location":"testing/#best-practices_1","title":"Best Practices","text":"<ul> <li>Test kritiske brugerflows</li> <li>Minimer eksterne afh\u00e6ngigheder</li> <li>Brug stabile selectors</li> <li>H\u00e5ndter asynkrone operationer korrekt </li> </ul>"}]}